# 
msgid ""
msgstr ""
"Project-Id-Version: Django Carrots 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-11-23 21:43+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/python_quickstart.rst:3
msgid "Introduction to Python"
msgstr ""

#: ../../source/python_quickstart.rst:5
msgid ""
"Let’s start with running the Python interpreter we installed in the previous"
" chapter. Please run:"
msgstr ""

#: ../../source/python_quickstart.rst:15
msgid ""
"Earlier we were working in the operating system's command line and we could "
"give commands. The prompt was ``~$``. After running the ``python`` command, "
"prompt changed to ``>>>``.  For us that means that for now we may only use "
"commands from the Python language. Recent commands ( such as: ``cd``, "
"``mkdir``) will not work. This is the moment when we start to learn a new "
"language!"
msgstr ""

#: ../../source/python_quickstart.rst:20
msgid ""
"We will not type signs ``>>>`` (the same as with ``~$``) - the interpreter "
"will do that for us."
msgstr ""

#: ../../source/python_quickstart.rst:23
msgid "Now we can count something, for example: ``2 + 2``:"
msgstr ""

#: ../../source/python_quickstart.rst:28
msgid "Python is excellent as a calculator:"
msgstr ""

#: ../../source/python_quickstart.rst:43
msgid ""
"Please pay special attention when writing decimals: use a period, not a "
"comma. Commas will be used to define :ref:`tuple <bmi-tuples>` but more on "
"that later."
msgstr ""

#: ../../source/python_quickstart.rst:48
msgid "Introduce yourself"
msgstr ""

#: ../../source/python_quickstart.rst:51
msgid "Strings"
msgstr ""

#: ../../source/python_quickstart.rst:53
msgid ""
"Numbers, however, are not enough to communicate effectively. So we need to "
"learn how to use ``strings`` . Here are some examples:"
msgstr ""

#: ../../source/python_quickstart.rst:66
msgid "You can also add strings as follows:"
msgstr ""

#: ../../source/python_quickstart.rst:71
msgid "or they can be multiplied by whole numbers:"
msgstr ""

#: ../../source/python_quickstart.rst:76
msgid ""
"The string must always begin and end with the same character. This may be a "
"single quote (``'``) or double quotes (``\"``). It has no effect on the "
"value of the string, i.e, typing ``\"Batman\"`` we create a string "
"``Batman`` - quotes are not a part of it, they only indicate that it is a "
"string ( unfortunately, Python is not so clever to guess it by itself)."
msgstr ""

#: ../../source/python_quickstart.rst:83
msgid "Printing the strings"
msgstr ""

#: ../../source/python_quickstart.rst:85
msgid ""
"But how to present value in a readable form? We can do it by using the "
"command  :func:`print`:"
msgstr ""

#: ../../source/python_quickstart.rst:90
msgid ""
"In a similar way we can write several strings in a single line, without "
"adding them to each other. They will be separated by spaces:"
msgstr ""

#: ../../source/python_quickstart.rst:96
msgid ""
":func:`print` command has many more applications as it can write almost "
"everything. For now, the only other kind of values we know are numbers:"
msgstr ""

#: ../../source/python_quickstart.rst:107
msgid ""
"For now we finish our work with the interactive console. To exit it enter "
"`quit()`::"
msgstr ""

#: ../../source/python_quickstart.rst:111
msgid ""
"Or faster by typing ``Ctrl+D`` (for Linux) or ``Ctrl+Z`` (for Windows)."
msgstr ""

#: ../../source/python_quickstart.rst:114
msgid "Source files"
msgstr ""

#: ../../source/python_quickstart.rst:116
msgid ""
"So far our code was executed in an interactive mode where we give commands "
"separately and immediately get an answer. It’s a great way to experiment and"
" learn new language elements, that is why we will get back to it."
msgstr ""

#: ../../source/python_quickstart.rst:120
msgid "Our first program may look as follows::"
msgstr ""

#: ../../source/python_quickstart.rst:124
msgid ""
"Save this program in a new file called ``visitingcard.py``, and then run it "
"from the command line using the command ``python visitingcard.py``:"
msgstr ""

#: ../../source/python_quickstart.rst:133
msgid ""
"A single program can contain more than one command. Each should be in a "
"separate line, for example::"
msgstr ""

#: ../../source/python_quickstart.rst:143
msgid ""
"We can insert blank lines wherever we want in ``visitingcard.py`` file to "
"increase its readability. Here we split the message header from its content "
"and its end."
msgstr ""

#: ../../source/python_quickstart.rst:148
msgid "BMI calculator"
msgstr ""

#: ../../source/python_quickstart.rst:150
msgid ""
"Now we are going to write a simple program to calculate `BMI` (`Body Mass "
"Index`_). The formula for its calculation is as follows::"
msgstr ""

#: ../../source/python_quickstart.rst:155
msgid ""
"We can divide, exponentate, and print out numbers. So let's create a new "
"file called ``bmi.py`` and try to write a program that calculates our BMI:"
msgstr ""

#: ../../source/python_quickstart.rst:163
msgid "Run our new program with::"
msgstr ""

#: ../../source/python_quickstart.rst:167
msgid "We get the following result:"
msgstr ""

#: ../../source/python_quickstart.rst:173
msgid "As you can see, our program still needs some improvements:"
msgstr ""

#: ../../source/python_quickstart.rst:175
msgid ""
"If someone else would like to use this program, we must change the contents "
"of ``bmi.py`` file."
msgstr ""

#: ../../source/python_quickstart.rst:177
msgid ""
"For a person who does not know the value of BMI table by heart, the value "
"21.387755102 won’t say anything."
msgstr ""

#: ../../source/python_quickstart.rst:180
msgid ""
"Printing so many decimal places is unnecessary. BMI is measured with an "
"accuracy of two decimal places."
msgstr ""

#: ../../source/python_quickstart.rst:183
msgid ""
"Anyway, programming is an art of solving problems, so … let's get to work! "
"It will give us an opportunity to learn about some new features of Python."
msgstr ""

#: ../../source/python_quickstart.rst:190
msgid "Names"
msgstr ""

#: ../../source/python_quickstart.rst:192
msgid ""
"Let's try to solve the first problem. At the beginning we would like to make"
" our program more readable, i.e. so that for the person reading the results,"
" it would be obvious which value is the weight, and which is the height."
msgstr ""

#: ../../source/python_quickstart.rst:196
msgid "That's why we give names to these values​​:"
msgstr ""

#: ../../source/python_quickstart.rst:206
msgid "The result has not changed:"
msgstr ""

#: ../../source/python_quickstart.rst:213
msgid ""
"In order to understand better how names work, let’s go back for a while to "
"the interactive mode and give a few names to some values:"
msgstr ""

#: ../../source/python_quickstart.rst:222
msgid "One value can have many names:"
msgstr ""

#: ../../source/python_quickstart.rst:228
msgid ""
"We also can change the value assigned to the name. The new value does not "
"need to be of the same type as the old one:"
msgstr ""

#: ../../source/python_quickstart.rst:237
msgid ""
"The names are independent of each other. We have just assigned to ``x`` a "
"new value, but the value assigned to ``y`` remains unchanged:"
msgstr ""

#: ../../source/python_quickstart.rst:243
msgid "For the ones who already know other programming languages."
msgstr ""

#: ../../source/python_quickstart.rst:245
msgid ""
"You probably wonder why we do not use the term \"variable\". This is because"
" the names in Python do not work the same way as variables. In most "
"languages, the operation  ``y = x`` would create a copy of the ``x`` and "
"would introduce it in the variable ``y``."
msgstr ""

#: ../../source/python_quickstart.rst:250
msgid ""
"In Python nothing is duplicated. ``y`` becomes only an alternative name for "
"the same value. If you change this value, both the ``x``, and ``y`` will "
"show the same thing."
msgstr ""

#: ../../source/python_quickstart.rst:253
msgid ""
"In our example we did not change the value of the number ``42``, but only "
"the value assigned to  ``x`` (in particular, the values of the numbers are "
"not modified, despite the fact that in 1897 the lower house of the Indiana "
"state accepted to change the value of the number π to ``3`` - which was "
"rejected in the Senate). Therefore, the print  ``print(y)`` will give us "
"``42``."
msgstr ""

#: ../../source/python_quickstart.rst:259
msgid ""
"As we have seen in our program, we can also give names to the results of "
"calculations and use names in calculations:"
msgstr ""

#: ../../source/python_quickstart.rst:268
msgid "Although once a value is calculated, it is not modified:"
msgstr ""

#: ../../source/python_quickstart.rst:274
msgid "Until we give the Python the command to repeat the calculation again:"
msgstr ""

#: ../../source/python_quickstart.rst:280
msgid ""
"Now is time to add some comments to our program so that the user (and us "
"too!) remembers that the weight has to be given in kilograms."
msgstr ""

#: ../../source/python_quickstart.rst:283
msgid ""
"Comments allow us to put arbitrary text in our python program. Comments will"
" be ignored by interpreter."
msgstr ""

#: ../../source/python_quickstart.rst:285
msgid ""
"A comment in Python is everything after the character ``#`` till the end of "
"the line::"
msgstr ""

#: ../../source/python_quickstart.rst:298
msgid "Calling a function"
msgstr ""

#: ../../source/python_quickstart.rst:300
msgid ""
"Our program looks quite OK, but if a user wants to calculate his/her BMI, he"
" still has to change the content of the program. It would be more convenient"
" to enter the required values in the console after opening the program and "
"get the BMI result."
msgstr ""

#: ../../source/python_quickstart.rst:304
msgid ""
"In order to write such a program we need to learn how to use the functions. "
"The first function we are going to learn is :func:`help`:"
msgstr ""

#: ../../source/python_quickstart.rst:310
msgid ""
":func:`help` function is very friendly as it tells us how we should use it. "
"It can also tell you how to use the other functions:"
msgstr ""

#: ../../source/python_quickstart.rst:325
msgid ""
":func:`input` will be used to load data from the user. As we read in the "
"description, it reads the string:"
msgstr ""

#: ../../source/python_quickstart.rst:335
msgid ""
"Now you will learn what \"calling a function\" means. You can call a "
"function using ``()``, which is an information for the interpreter to call a"
" function. Calling a function will run a function. If you forget  to type "
"``()`` after the function name, the function is not called. In this "
"situation you will not get any informations about an error, because the "
"command you typed is still correct."
msgstr ""

#: ../../source/python_quickstart.rst:341
msgid ""
"Generally, called functions **return** some values. :func:`input` function "
"returns a string, that’s why we can use it the same way as we used strings "
"before."
msgstr ""

#: ../../source/python_quickstart.rst:344
msgid "For example we can use ``input()`` to save given string as a name:"
msgstr ""

#: ../../source/python_quickstart.rst:359
msgid "Is that enough to improve our program?"
msgstr ""

#: ../../source/python_quickstart.rst:376
msgid ""
"As you can see, Python doesn’t know what result we expect. Both strings "
"(``str``), and numbers (``int``) can't be added together. Python does not "
"know if we are referring to the number ``63.5`` or to the string "
"``\"60.5\"``. Only we know that, so we have to include this information in "
"the program."
msgstr ""

#: ../../source/python_quickstart.rst:381
msgid "Let’s introduce two more functions:"
msgstr ""

#: ../../source/python_quickstart.rst:396
msgid "and"
msgstr ""

#: ../../source/python_quickstart.rst:408
msgid ""
"The function :func:`help` does not hesitate to inform us that, in fact, "
":func:`int` and :func:`float` are not functions, but classes (more about "
"this in the further part of the manual) hence the information about all the "
"other things that you can use them for. For now, we are only interested in "
"only the basic functionality of the conversion of strings into the numbers "
"of determined type."
msgstr ""

#: ../../source/python_quickstart.rst:415
msgid "Let’s test :func:`int` and :func:`float`:"
msgstr ""

#: ../../source/python_quickstart.rst:433
msgid ""
"Before we use the newly learnt functions in our program, let’s make a plan "
"of how it should work:"
msgstr ""

#: ../../source/python_quickstart.rst:435
msgid "Ask the user to enter the height."
msgstr ""

#: ../../source/python_quickstart.rst:436
msgid "Load the string from the user and save it under the name “height”."
msgstr ""

#: ../../source/python_quickstart.rst:437
#: ../../source/python_quickstart.rst:440
msgid "Replace the string with the number with a fraction."
msgstr ""

#: ../../source/python_quickstart.rst:438
msgid "Ask the user to enter the weight."
msgstr ""

#: ../../source/python_quickstart.rst:439
msgid "Load the string from the user and save it under the name of “weight”."
msgstr ""

#: ../../source/python_quickstart.rst:441
msgid "Using the remembered values calculate BMI and save as bmi."
msgstr ""

#: ../../source/python_quickstart.rst:442
msgid "Print the calculated BMI."
msgstr ""

#: ../../source/python_quickstart.rst:445
msgid ""
"It should not surprise us that these eight points can be directly translated"
" into eight lines of our program (not counting spaces):"
msgstr ""

#: ../../source/python_quickstart.rst:466
msgid ""
"You can save above program to ``bmi.py`` and run ``python bmi.py``. The "
"result should look like this:"
msgstr ""

#: ../../source/python_quickstart.rst:476
msgid ""
"In conclusion, to call a function we need to know its name (until now we "
"learnt a bunch of functions: :func:`print`, :func:`help`, :func:`input`, "
":func:`int`, :func:`float` and :func:`quit`), and what data it expects from "
"us (so called, the list of arguments)."
msgstr ""

#: ../../source/python_quickstart.rst:479
msgid ""
"Entering just the name does not activate the function. It will tell us only "
"that it is a function:"
msgstr ""

#: ../../source/python_quickstart.rst:486
msgid "In order to call the function we must put brackets after its name:"
msgstr ""

#: ../../source/python_quickstart.rst:490
msgid "Now the function will be executed by Python."
msgstr ""

#: ../../source/python_quickstart.rst:492
msgid ""
"All arguments are given in parentheses. To specify more than one, separate "
"them with a comma:"
msgstr ""

#: ../../source/python_quickstart.rst:499
msgid "Checking conditions"
msgstr ""

#: ../../source/python_quickstart.rst:501
msgid ""
"Let’s go to our next problem. We want our program to print the appropriate "
"classification for the calculated BMI by using the table below:"
msgstr ""

#: ../../source/python_quickstart.rst:506
msgid "BMI"
msgstr ""

#: ../../source/python_quickstart.rst:506
msgid "Classification"
msgstr ""

#: ../../source/python_quickstart.rst:508
msgid "< 18,5"
msgstr ""

#: ../../source/python_quickstart.rst:508
msgid "underweight"
msgstr ""

#: ../../source/python_quickstart.rst:509
msgid "18,5 – 24,99"
msgstr ""

#: ../../source/python_quickstart.rst:509
msgid "normal weight"
msgstr ""

#: ../../source/python_quickstart.rst:510
msgid "≥ 25,0"
msgstr ""

#: ../../source/python_quickstart.rst:510
msgid "overweight"
msgstr ""

#: ../../source/python_quickstart.rst:513
msgid ""
"We need to use the “conditional statement” :keyword:`if`. It will execute "
"the rest of the program based on a given condition:"
msgstr ""

#: ../../source/python_quickstart.rst:550
msgid "Comparisons:  true or false?"
msgstr ""

#: ../../source/python_quickstart.rst:552
msgid ""
"The first element which we have not mentioned yet, are comparisons. For "
"numbers they act exactly like during the math lessons:"
msgstr ""

#: ../../source/python_quickstart.rst:568
msgid ""
"The result of comparison is always ``True`` or ``False``. They can be "
"combined into more complex conditions by using words :keyword:`and` and "
":keyword:`or`:"
msgstr ""

#: ../../source/python_quickstart.rst:586
msgid "Indentations"
msgstr ""

#: ../../source/python_quickstart.rst:588
msgid ""
"Another thing you should pay attention to is the indentation in the code. "
"Open the interactive mode and enter a simple condition, such as::"
msgstr ""

#: ../../source/python_quickstart.rst:594
msgid ""
"So far nothing has happened, as evidenced by dots ``...`` instead of "
"incentives ``>>>``, which we saw so far. Python expects us to give further "
"instructions which are supposed to be executed if the condition ``2 > 1``  "
"turns to be true. Let’s try to make Python print \"OK\"::"
msgstr ""

#: ../../source/python_quickstart.rst:605
msgid ""
"Unfortunately, we haven’t succeeded. Python needs to know whether the "
"instruction we have written is a continuation of  :keyword:`if` or it is the"
" next instruction not covered by the condition. To this purpose we need to "
"indent our code:"
msgstr ""

#: ../../source/python_quickstart.rst:614
msgid ""
"All you need is one space or ``TAB``. However, all the lines that are "
"supposed to be executed one after another, should be indented the same way::"
msgstr ""

#: ../../source/python_quickstart.rst:641
msgid ""
"To avoid chaos, most of the Python’ programmers use four spaces for each "
"level of indentation. We will do the same:"
msgstr ""

#: ../../source/python_quickstart.rst:655
msgid "What if not?"
msgstr ""

#: ../../source/python_quickstart.rst:657
msgid "Actually, we could write our program just by using :keyword:`if` ::"
msgstr ""

#: ../../source/python_quickstart.rst:667
msgid ""
"However, we have used also :keyword:`else` and :keyword:`elif`, so that we "
"would not have to repeat similar conditions nor to increase readability. In "
"more complex programs it may not be obvious from the beginning that the "
"following condition is the opposite of the previous one."
msgstr ""

#: ../../source/python_quickstart.rst:672
msgid ""
"Using :keyword:`else` , we have the guarantee that the given instructions "
"will be executed only if the instructions printed under :keyword:`if` "
"haven’t been executed::"
msgstr ""

#: ../../source/python_quickstart.rst:686
msgid ""
"Pay particular attention to the indentations. Every use of  :keyword:`else`,"
" will cause an increased indentation of our code. It is very annoying when "
"you have to check a few or a dozen or so conditions which exclude one "
"another . Therefore the authors of Python added a little 'improvement' in "
"the form of :keyword:`elif`, instruction, which allows you to check another "
"condition immediately::"
msgstr ""

#: ../../source/python_quickstart.rst:708
msgid "Strings formatting"
msgstr ""

#: ../../source/python_quickstart.rst:710
msgid ""
"The last issue which we have mentioned above was the problem with too many "
"digits in a printed BMI. Out of the three problems we had, this one is the "
"easiest to solve."
msgstr ""

#: ../../source/python_quickstart.rst:713
msgid ""
"That’s why we left it for the end of our \"adventure\" with the BMI "
"calculator. We already know that we can add strings to each other and "
"multiply them by integers. You will see that we can also format them. But "
"first we will need one more type of data (except the strings and the numbers"
" we already know)."
msgstr ""

#: ../../source/python_quickstart.rst:722
msgid "Tuples"
msgstr ""

#: ../../source/python_quickstart.rst:724
msgid ""
"At the beginning we mentioned that we can not use commas in numbers, because"
" we will need them later while using tuples. And here they are:"
msgstr ""

#: ../../source/python_quickstart.rst:735
msgid ""
"A tuple is nothing more than a few values grouped into one. The values we "
"want to group should be separated by commas. The whole thing can be enclosed"
" in parentheses to make it more clear, but it is not required. Except when "
"we want to group none of the elements (however strange it may sound):"
msgstr ""

#: ../../source/python_quickstart.rst:742
msgid "Tuples can be combined:"
msgstr ""

#: ../../source/python_quickstart.rst:749
msgid ""
"They may also contain other tuples e.g. information on a point on the map "
"can be grouped as follows:"
msgstr ""

#: ../../source/python_quickstart.rst:754
msgid "where ``x`` and ``y`` are numbers."
msgstr ""

#: ../../source/python_quickstart.rst:756
msgid ""
"We can refer to the grouped values by using their positions in the tuple "
"(counting form zero) e.g.:"
msgstr ""

#: ../../source/python_quickstart.rst:766
msgid "Formatting"
msgstr ""

#: ../../source/python_quickstart.rst:768
msgid ""
"Going back to our program: currently the result is reduced to a single line."
" Now we want to write the BMI as a number and the interval in which it is "
"located, that is to say::"
msgstr ""

#: ../../source/python_quickstart.rst:773
msgid ""
"Modify the current program so that the calculated BMI would be available "
"under the name of ``bmi``,and the name of the interval under the name of "
"``category``. Then we can use :func:`print` and obtain the required result:"
msgstr ""

#: ../../source/python_quickstart.rst:791
msgid ""
"Well, almost….We still have too many digits. We would also have a problem if"
" we wanted to generate such a string and save with a name, because we use "
":func:`print` to separate the elements. Fortunately, there is a better way:"
msgstr ""

#: ../../source/python_quickstart.rst:803
msgid ""
"We have here a string and a tuple joined by ``%``. The string is a template "
"which will be completed with values from the tuple. The spaces to be filled "
"are also labeled with the percentage (``%``). . The letter that follows "
"defines the type of a value we want to insert. The integers are represented "
"by  ``i`` as **integer** (we can also use ``d`` as **decimal**),  strings "
"are represented by ``s`` as **string**, and floating-point numbers are "
"represented by ``f`` for **float**:"
msgstr ""

#: ../../source/python_quickstart.rst:812
msgid ""
"Now instead of nine decimal places we always get six, but the formatting has"
" the advantage that it allows us to have more control by putting between "
"``%`` and ``f`` additional information, e.g. if you want to display only two"
" places after the decimal point:"
msgstr ""

#: ../../source/python_quickstart.rst:822
msgid ""
"There are plenty options of formatting, so we will not show them all here. "
"One of the most useful is the option of aligning to a specific number of "
"characters:"
msgstr ""

#: ../../source/python_quickstart.rst:845
msgid ""
"We can also align the string ``-``  to the left by putting before the number"
" of characters:"
msgstr ""

#: ../../source/python_quickstart.rst:867
msgid "Aligning towards the centre is an additional excercise for you :)."
msgstr ""

#: ../../source/python_quickstart.rst:871
msgid "Summary"
msgstr ""

#: ../../source/python_quickstart.rst:873
msgid ""
"In this chapter we learned basics of Python syntax. We discovered how to "
"print integers, floating-point numbers, strings and tuples."
msgstr ""

#: ../../source/python_quickstart.rst:876
msgid ""
"We learnt the function :func:`print`, that prints information for the user "
"and the function :func:`input`, which reads it."
msgstr ""

#: ../../source/python_quickstart.rst:879
msgid ""
"We also know now that indentations can be important, especially when we want"
" to use the instruction :keyword:`if` (also in connection with "
":keyword:`else` and :keyword:`elif`)."
msgstr ""

#: ../../source/python_quickstart.rst:882
msgid ""
"We successfully created a program stored in a file and ran it. Our program "
"asks the user to answer a few simple questions, performs calculations and "
"presents results in the form which is useful for the user."
msgstr ""

#: ../../source/python_quickstart.rst:886
msgid ""
"This is quite a lot like for a first program. We still have a lot of work, "
"anyhow you can be proud of what we have done so far!"
msgstr ""
